comshiro@Ubuntu24:~/PF$ cd week2
comshiro@Ubuntu24:~/PF/week2$ ghci
GHCi, version 9.4.8: https://www.haskell.org/ghc/  :? for help
ghci> :l lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:13:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
13 | isPrime :: Integer -> Bool
   | ^
Failed, no modules loaded.
ghci> :l lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:13:29: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
13 | --isPrime :: Integer -> Bool
   |                             ^
Failed, no modules loaded.
ghci> :l lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> and' True False
False
ghci> and' True True
True
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:24:13: error:
    • Couldn't match expected type ‘Bool -> Bool’
                  with actual type ‘Bool’
    • The function ‘or'’ is applied to three value arguments,
        but its type ‘Bool -> Bool -> Bool’ has only two
      In the expression: or' neg' (q) p
      In an equation for ‘impl'’: impl' q p = or' neg' (q) p
   |
24 | impl' q p = or' neg'(q) p
   |             ^^^^^^^^^^^^^

lab2.hs:24:17: error:
    • Couldn't match expected type ‘Bool’
                  with actual type ‘Bool -> Bool’
    • Probable cause: ‘neg'’ is applied to too few arguments
      In the first argument of ‘or'’, namely ‘neg'’
      In the expression: or' neg' (q) p
      In an equation for ‘impl'’: impl' q p = or' neg' (q) p
   |
24 | impl' q p = or' neg'(q) p
   |                 ^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> neg' True
False
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:31:23: error:
    • Syntax error on 'mod'
      Perhaps you intended to use TemplateHaskell or TemplateHaskellQuotes
    • In the Template Haskell quotation 'mod'
   |
31 | hasDivisors n a b | n 'mod' a == 0 = True
   |                       ^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> hasDivisors 12 2 7
True
ghci> hasDivisors 12 12 4
False
ghci> hasDivisors 13 2 9
*** Exception: lab2.hs:(30,1)-(32,43): Non-exhaustive patterns in function hasDivisors

ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:37:19: error:
    Variable not in scope:
      hadDivisors :: Integer -> t0 -> Integer -> Bool
    Suggested fix: Perhaps use ‘hasDivisors’ (line 32)
   |
37 | isPrime n = neg' (hadDivisors n 1 n)
   |                   ^^^^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> isPrime 13
False
ghci> isPrime 2
False
ghci> isPrime 4
False
ghci> isPrime 6
False
ghci> isPrime 8
False
ghci> hasDivisors 4

<interactive>:21:1: error:
    • No instance for (Show (Integer -> Integer -> Bool))
        arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
ghci> hasDivisors 13 1 13
True
ghci> hasDivisors 24 1 10
True
ghci> hasDivisors 13 4 18
True
ghci> hasDivisors 13 18 4
False
ghci> hasDivisors 17 13 20
True
ghci> hasDivisors 13 1 13
True
ghci> :l
Ok, no modules loaded.
ghci> :r
Ok, no modules loaded.
ghci> :load lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:14: error:
    • Couldn't match expected type ‘Bool -> Bool’
                  with actual type ‘Bool’
    • The function ‘and’ is applied to two value arguments,
        but its type ‘t0 Bool -> Bool’ has only one
      In the expression: and (mod a 2 == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and (mod a 2 == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and (mod a 2 ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

lab2.hs:49:19: error:
    • Couldn't match expected type ‘t0 Bool’ with actual type ‘Bool’
    • In the first argument of ‘and’, namely ‘(mod a 2 == 0)’
      In the expression: and (mod a 2 == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and (mod a 2 == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and (mod a 2 ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |                   ^^^^^^^^^^^

lab2.hs:49:47: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Int -> Int’
    • Probable cause: ‘cmmdc'’ is applied to too few arguments
      In the first argument of ‘(/)’, namely ‘cmmdc' a’
      In the first argument of ‘(/)’, namely ‘cmmdc' a / 2 b’
      In the expression: cmmdc' a / 2 b / 2
   |
49 | cmmdc' a b | and (mod a 2 ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |                                               ^^^^^^^^

lab2.hs:50:29: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Int -> Int’
    • Probable cause: ‘cmmdc'’ is applied to too few arguments
      In the first argument of ‘(/)’, namely ‘cmmdc' a’
      In the expression: cmmdc' a / 2 b
      In an equation for ‘cmmdc'’:
          cmmdc' a b | mod a 2 == 0 = cmmdc' a / 2 b
   |
50 | cmmdc' a b | mod a 2 == 0 = cmmdc' a/2 b
   |                             ^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:14: error:
    • Couldn't match expected type ‘Bool -> Bool’
                  with actual type ‘Bool’
    • The function ‘and’ is applied to two value arguments,
        but its type ‘t0 Bool -> Bool’ has only one
      In the expression: and ((mod a 2) == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and ((mod a 2) == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and ((mod a 2) ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

lab2.hs:49:19: error:
    • Couldn't match expected type ‘t0 Bool’ with actual type ‘Bool’
    • In the first argument of ‘and’, namely ‘((mod a 2) == 0)’
      In the expression: and ((mod a 2) == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and ((mod a 2) == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and ((mod a 2) ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |                   ^^^^^^^^^^^^^

lab2.hs:49:49: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Int -> Int’
    • Probable cause: ‘cmmdc'’ is applied to too few arguments
      In the first argument of ‘(/)’, namely ‘cmmdc' a’
      In the first argument of ‘(/)’, namely ‘cmmdc' a / 2 b’
      In the expression: cmmdc' a / 2 b / 2
   |
49 | cmmdc' a b | and ((mod a 2) ==0) (mod b 2==0) = cmmdc' a/2 b/2
   |                                                 ^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:14: error:
    • Couldn't match expected type ‘Bool -> Bool’
                  with actual type ‘Bool’
    • The function ‘and’ is applied to two value arguments,
        but its type ‘t0 Bool -> Bool’ has only one
      In the expression: and ((mod a 2) == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and ((mod a 2) == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and ((mod a 2) ==0) (mod b 2==0) = cmmdc' (a/2) (b/2)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

lab2.hs:49:19: error:
    • Couldn't match expected type ‘t0 Bool’ with actual type ‘Bool’
    • In the first argument of ‘and’, namely ‘((mod a 2) == 0)’
      In the expression: and ((mod a 2) == 0) (mod b 2 == 0)
      In a stmt of a pattern guard for
                     an equation for ‘cmmdc'’:
        and ((mod a 2) == 0) (mod b 2 == 0)
   |
49 | cmmdc' a b | and ((mod a 2) ==0) (mod b 2==0) = cmmdc' (a/2) (b/2)
   |                   ^^^^^^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:59: error:
    • No instance for (Fractional Int) arising from a use of ‘/’
    • In the first argument of ‘cmmdc'’, namely ‘(a / 2)’
      In the expression: cmmdc' (a / 2) (b / 2)
      In an equation for ‘cmmdc'’:
          cmmdc' a b
            | and' ((mod a 2) == 0) (mod b 2 == 0) = cmmdc' (a / 2) (b / 2)
   |
49 | cmmdc' a b | and' ((mod a 2) ==0) (mod b 2==0) = cmmdc' (a/2) (b/2)
   |                                                           ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:59: error:
    • No instance for (Fractional Int) arising from a use of ‘/’
    • In the first argument of ‘cmmdc'’, namely ‘(a / 2)’
      In the expression: cmmdc' (a / 2) (b / 2)
      In an equation for ‘cmmdc'’:
          cmmdc' a b
            | and' ((mod a 2) == 0) (mod b 2 == 0) = cmmdc' (a / 2) (b / 2)
   |
49 | cmmdc' a b | and' ((mod a 2) ==0) (mod b 2==0) = cmmdc' (a/2) (b/2)
   |                                                           ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:57: error:
    • No instance for (Fractional Int) arising from a use of ‘/’
    • In the first argument of ‘cmmdc'’, namely ‘(a / 2)’
      In the expression: cmmdc' (a / 2) (b / 2)
      In an equation for ‘cmmdc'’:
          cmmdc' a b
            | and' (mod a 2 == 0) (mod b 2 == 0) = cmmdc' (a / 2) (b / 2)
   |
49 | cmmdc' a b | and' (mod a 2 ==0) (mod b 2==0) = cmmdc' (a/2) (b/2)
   |                                                         ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> :load lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> :r
Ok, one module loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]
Ok, one module loaded.
ghci> cmmdc' 26 8
^CInterrupted.
ghci> 
ghci> 
ghci> :r
Ok, one module loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]
Ok, one module loaded.
ghci> :r
Ok, one module loaded.
ghci> cmmdc' 26 8



^CInterrupted.
ghci> 
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]
Ok, one module loaded.
ghci> cmmdc' 26 8
2
ghci> cmmdc' 13 6
1
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:83:18: error:
    Variable not in scope: prod :: Int -> Int -> Int
    Suggested fix:
      Perhaps use one of these:
        ‘pred’ (imported from Prelude), ‘prod'’ (line 82)
   |
83 | prod' a b = a + (prod a (pred b))
   |                  ^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:65:11: error:
    • Couldn't match expected type ‘Integer’ with actual type ‘Int’
    • In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |           ^^^^^^^^^^^^^

lab2.hs:65:19: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Integer’
    • In the first argument of ‘fiboaux’, namely ‘n’
      In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |                   ^
Failed, no modules loaded.
ghci> :l lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:65:11: error:
    • Couldn't match expected type ‘Integer’ with actual type ‘Int’
    • In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |           ^^^^^^^^^^^^^

lab2.hs:65:19: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Integer’
    • In the first argument of ‘fiboaux’, namely ‘n’
      In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |                   ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:65:11: error:
    • Couldn't match expected type ‘Integer’ with actual type ‘Int’
    • In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |           ^^^^^^^^^^^^^

lab2.hs:65:19: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Integer’
    • In the first argument of ‘fiboaux’, namely ‘n’
      In the expression: fiboaux n 0 1
      In an equation for ‘fibo'’: fibo' n = fiboaux n 0 1
   |
65 | fibo' n = fiboaux n 0 1
   |                   ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> :r
Ok, one module loaded.
ghci> add' 13 24
37
ghci> prod 6 7

<interactive>:55:1: error:
    Variable not in scope: prod :: t0 -> t1 -> t
    Suggested fix:
      Perhaps use one of these:
        ‘pred’ (imported from Prelude), ‘prod'’ (line 82)
ghci> prod' 6 7
42
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:90:21: error:
    • Couldn't match expected type ‘Int -> Int’ with actual type ‘Int’
    • In the first argument of ‘exp’, namely ‘a’
      In the second argument of ‘(*)’, namely ‘(exp a (b - 1))’
      In the expression: a * (exp a (b - 1))
   |
90 | exp' a b = a * (exp a (b-1))
   |                     ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:90:12: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Int -> Int’
    • Probable cause: ‘prod'’ is applied to too few arguments
      In the expression: prod' (a (exp a (b - 1)))
      In an equation for ‘exp'’: exp' a b = prod' (a (exp a (b - 1)))
   |
90 | exp' a b = prod'(a (exp a (b-1)))
   |            ^^^^^^^^^^^^^^^^^^^^^^

lab2.hs:90:18: error:
    • Couldn't match expected type ‘t0 -> Int’ with actual type ‘Int’
    • The function ‘a’ is applied to one value argument,
        but its type ‘Int’ has none
      In the first argument of ‘prod'’, namely ‘(a (exp a (b - 1)))’
      In the expression: prod' (a (exp a (b - 1)))
   |
90 | exp' a b = prod'(a (exp a (b-1)))
   |                  ^^^^^^^^^^^^^^^

lab2.hs:90:25: error:
    • Couldn't match expected type ‘Int -> t0’ with actual type ‘Int’
    • In the first argument of ‘exp’, namely ‘a’
      In the first argument of ‘a’, namely ‘(exp a (b - 1))’
      In the first argument of ‘prod'’, namely ‘(a (exp a (b - 1)))’
   |
90 | exp' a b = prod'(a (exp a (b-1)))
   |                         ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:90:12: error:
    • Couldn't match expected type ‘Int’ with actual type ‘Int -> Int’
    • Probable cause: ‘prod'’ is applied to too few arguments
      In the expression: prod' (a (exp' a (b - 1)))
      In an equation for ‘exp'’: exp' a b = prod' (a (exp' a (b - 1)))
   |
90 | exp' a b = prod'(a (exp' a (b-1)))
   |            ^^^^^^^^^^^^^^^^^^^^^^^

lab2.hs:90:18: error:
    • Couldn't match expected type ‘Int -> Int’ with actual type ‘Int’
    • The function ‘a’ is applied to one value argument,
        but its type ‘Int’ has none
      In the first argument of ‘prod'’, namely ‘(a (exp' a (b - 1)))’
      In the expression: prod' (a (exp' a (b - 1)))
   |
90 | exp' a b = prod'(a (exp' a (b-1)))
   |                  ^^^^^^^^^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:55:16: error: parse error on input ‘->’
   |
55 | tail_cmmdc' Int->Int->Int->Int
   |                ^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:63:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
63 | fibo 0 = 0
   | ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:65:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
65 | fibo 0 = 0
   | ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:64:1: error:
    parse error (possibly incorrect indentation or mismatched brackets)
   |
64 | fibo::Int->Int
   | ^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:57:55: error:
    Variable not in scope: tail_cmmdc :: Int -> Int -> Int -> Int
    Suggested fix: Perhaps use ‘tail_cmmdc'’ (line 56)
   |
57 | tail_cmmdc' x y a | and' (mod x 2 ==0) (mod y 2==0) = tail_cmmdc (div x 2) (div y 2) (2*a)
   |                                                       ^^^^^^^^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> tail_cmmdc' 26 8

<interactive>:67:1: error:
    • No instance for (Show (Int -> Int)) arising from a use of ‘print’
        (maybe you haven't applied a function to enough arguments?)
    • In a stmt of an interactive GHCi command: print it
ghci> tail_cmmdc' 26 8 1
2
ghci> tail_cmmdc' 15 5 1
5
ghci> exp' 2 3
8
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted ) [Source file changed]

lab2.hs:49:60: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
49 | cmmdc' a b | and' (mod a 2 ==0) (mod b 2==0) = 2* (cmmdc' (div a 2) (div b 2))
   |                                                            ^^^

lab2.hs:49:70: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
49 | cmmdc' a b | and' (mod a 2 ==0) (mod b 2==0) = 2* (cmmdc' (div a 2) (div b 2))
   |                                                                      ^^^

lab2.hs:50:39: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
50 | cmmdc' a b | (mod a 2) == 0 = cmmdc' (div a 2) b
   |                                       ^^^

lab2.hs:51:41: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
51 | cmmdc' a b | (mod b 2) == 0 = cmmdc' a (div b 2)
   |                                         ^^^

lab2.hs:57:68: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
57 | tail_cmmdc' x y a | and' (mod x 2 ==0) (mod y 2==0) = tail_cmmdc' (div x 2) (div y 2) (2*a)
   |                                                                    ^^^

lab2.hs:57:78: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
57 | tail_cmmdc' x y a | and' (mod x 2 ==0) (mod y 2==0) = tail_cmmdc' (div x 2) (div y 2) (2*a)
   |                                                                              ^^^

lab2.hs:58:50: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
58 | tail_cmmdc' x y a |(mod x 2) == 0 = tail_cmmdc' (div x 2) y a
   |                                                  ^^^

lab2.hs:59:52: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
59 | tail_cmmdc' x y a |(mod y 2) == 0 = tail_cmmdc' x (div y 2) a
   |                                                    ^^^
Failed, no modules loaded.
ghci> :load lab2.hs
[1 of 2] Compiling Main             ( lab2.hs, interpreted )

lab2.hs:49:60: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
49 | cmmdc' a b | and' (mod a 2 ==0) (mod b 2==0) = 2* (cmmdc' (div a 2) (div b 2))
   |                                                            ^^^

lab2.hs:49:70: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
49 | cmmdc' a b | and' (mod a 2 ==0) (mod b 2==0) = 2* (cmmdc' (div a 2) (div b 2))
   |                                                                      ^^^

lab2.hs:50:39: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
50 | cmmdc' a b | (mod a 2) == 0 = cmmdc' (div a 2) b
   |                                       ^^^

lab2.hs:51:41: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
51 | cmmdc' a b | (mod b 2) == 0 = cmmdc' a (div b 2)
   |                                         ^^^

lab2.hs:57:68: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
57 | tail_cmmdc' x y a | and' (mod x 2 ==0) (mod y 2==0) = tail_cmmdc' (div x 2) (div y 2) (2*a)
   |                                                                    ^^^

lab2.hs:57:78: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
57 | tail_cmmdc' x y a | and' (mod x 2 ==0) (mod y 2==0) = tail_cmmdc' (div x 2) (div y 2) (2*a)
   |                                                                              ^^^

lab2.hs:58:50: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
58 | tail_cmmdc' x y a |(mod x 2) == 0 = tail_cmmdc' (div x 2) y a
   |                                                  ^^^

lab2.hs:59:52: error:
    Ambiguous occurrence ‘div’
    It could refer to
       either ‘Prelude.div’,
              imported from ‘Prelude’ at lab2.hs:1:1
              (and originally defined in ‘GHC.Real’)
           or ‘Main.div’, defined at lab2.hs:100:1
   |
59 | tail_cmmdc' x y a |(mod y 2) == 0 = tail_cmmdc' x (div y 2) a
   |                                                    ^^^
Failed, no modules loaded.
ghci> :r
[1 of 2] Compiling Main             ( lab2.hs, interpreted )
Ok, one module loaded.
ghci> 
ghci> mod 3 2
1
ghci> mod 13 5
3
ghci> div 57 3
19
ghci> 